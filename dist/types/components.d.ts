/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
export namespace Components {
    interface PricingTable {
    }
}
export interface PricingTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPricingTableElement;
}
declare global {
    interface HTMLPricingTableElementEventMap {
        "handleButtonClick": any;
    }
    interface HTMLPricingTableElement extends Components.PricingTable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPricingTableElementEventMap>(type: K, listener: (this: HTMLPricingTableElement, ev: PricingTableCustomEvent<HTMLPricingTableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPricingTableElementEventMap>(type: K, listener: (this: HTMLPricingTableElement, ev: PricingTableCustomEvent<HTMLPricingTableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPricingTableElement: {
        prototype: HTMLPricingTableElement;
        new (): HTMLPricingTableElement;
    };
    interface HTMLElementTagNameMap {
        "pricing-table": HTMLPricingTableElement;
    }
}
declare namespace LocalJSX {
    interface PricingTable {
        "onHandleButtonClick"?: (event: PricingTableCustomEvent<any>) => void;
    }
    interface IntrinsicElements {
        "pricing-table": PricingTable;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "pricing-table": LocalJSX.PricingTable & JSXBase.HTMLAttributes<HTMLPricingTableElement>;
        }
    }
}
